@model Vidly.ViewModels.CustomerViewModel
@{
    ViewBag.Title = "AddCustomer2";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Add Customer including MembershipType</h2>

<!--
    Since we are using Vidly.ViewModels.CustomerViewModel as the model, we need to prefix Customer to the fields
    related to Customer model
-->
<!--

https://www.completecsharptutorial.com/asp-net-mvc5/html-beginform-example-tutorial-aspnet-mvc5.php
Html.BeginForm("ActionMethod", "ControllerName","Get⁄Post Method")




using(){} enables the form to be closed and represents <form></form> and disposes form at end-of-use
Html.BeginForm("ActionName", "ControllerName")

-->

@using (Html.BeginForm("CreateCustomerForm", "Customers", FormMethod.Post))
{

    @Html.ValidationSummary()
    <!-- VALIDATION SUMMARY PROVIDES INFORMATION ON FIELD REQUIREMENTS -->
    <!-- https://www.tutorialsteacher.com/mvc/htmlhelper-validationsummary -->



    <!--

        //CRITICAL NOTE: IN ORDER TO AUTOMATICALLY MAP THE CUSTOMER IN VIEWMODEL TO CUSTOMER IN MODEL,
        //THE FIELD NAME MUST BE CUSTOMER IN THE VIEWMODEL!
        //This way, CustomerViewModel.Customer.CustomerName == Customer.CustomerName

    -->

    <!-- Special markup and class applied to form fields to ensure proper rendering -->
    <!-- TEXT FIELD -->
    <div class="form-group">
        <!-- Inside this we need a 1) Label and 2) an Input field: -->
        <!-- For this field, we use HTML helper code -->
        <!-- Lambda expression to identify Field from Customer model -->
        <!-- Since we are using Vidly.ViewModels.AddCustomerViewModel as the model,
            we need to prefix Customer to the fields related to Customer model.
            The field Customer is found in the Vidly.ViewModels.CustomerViewModel model
        -->
        @Html.LabelFor(c => c.Customer.CustomerName)
        @Html.TextBoxFor(c => c.Customer.CustomerName, new { @class = "form-control" })
        @Html.ValidationMessageFor(c => c.Customer.CustomerName)
    </div>
    <br />
    <!-- DATE FIELD -->
    <div class="form-group">
        @Html.LabelFor(c => c.Customer.BirthDate)
        @Html.TextBoxFor(c => c.Customer.BirthDate, new { @class = "form-control"})
        @Html.ValidationMessageFor(c => c.Customer.BirthDate)
    </div>
    <br />
    <!-- CHECKBOX -->

    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsletter) Subscribed to Newsletter?
        </label>
    </div>
    <br />
    <!-- DROPDOWN -->
    <div class="form-group">
        @Html.LabelFor(m => m.Customer.MembershipTypeID)
        @Html.DropDownListFor(m => m.Customer.MembershipTypeID, new SelectList(Model.ListOfMembershipTypes, "MembershipTypeID", "MembershipName"), "Select Membership from below", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeID)
    </div>
    <br />


    //Model Binding:
    //Adding a button to save all Form input
    <button type="submit" class="btn btn-primary" id="CreateCustomer" value="CreateCustomer">Save</button>



}